// Verifica se o navegador suporta notifica√ß√µes e se ainda n√£o foi concedida permiss√£o
// Solicita permiss√£o para notifica√ß√µes com feedback e controle
function solicitarPermissaoNotificacao() {
  if ("Notification" in window) {
    if (Notification.permission === "default") {
      // Pede permiss√£o apenas se ainda n√£o foi dada nem negada
      Notification.requestPermission().then((permission) => {
        if (permission === "granted") {
          console.log("‚úÖ Permiss√£o para notifica√ß√µes concedida.");
        } else {
          console.warn("‚ùå Permiss√£o para notifica√ß√µes negada.");
        }
      });
    } else if (Notification.permission === "granted") {
      console.log("üîî Permiss√£o j√° concedida.");
    } else {
      console.warn("‚ö†Ô∏è O usu√°rio bloqueou as notifica√ß√µes.");
    }
  } else {
    console.error("üö´ Este navegador n√£o suporta notifica√ß√µes.");
  }
}

// Chama a fun√ß√£o assim que o DOM estiver pronto
document.addEventListener("DOMContentLoaded", () => {
  solicitarPermissaoNotificacao();
});


// Verifica se o navegador suporta Service Workers e registra o arquivo sw.js
if ("serviceWorker" in navigator) {
  navigator.serviceWorker
    .register("sw.js") // Caminho para o Service Worker
    .then(() => console.log("Service Worker registrado!"))
    .catch((erro) => console.log("Erro no SW:", erro));
}

// Verifica se o app est√° em modo standalone (instalado)
const isStandalone =
  window.matchMedia("(display-mode: standalone)").matches ||
  window.navigator.standalone === true;

// Vari√°vel para guardar o evento de instala√ß√£o adiado
let deferredPrompt;

// Evento disparado antes do prompt de instala√ß√£o ser exibido
window.addEventListener("beforeinstallprompt", (e) => {
  e.preventDefault(); // Impede o comportamento padr√£o
  deferredPrompt = e; // Salva o evento para usar depois

  const isStandalone =
    window.matchMedia("(display-mode: standalone)").matches ||
    window.navigator.standalone === true;

  if (!isStandalone) {
    // Cria o bot√£o de instala√ß√£o manualmente
    const installBtn = document.createElement("button");
    installBtn.textContent = "üì≤ Instalar Aplicativo";
    installBtn.style = "position: fixed; bottom: 20px; right: 20px; z-index: 999;";
    document.body.appendChild(installBtn);

    installBtn.addEventListener("click", () => {
      deferredPrompt.prompt(); // Mostra o prompt

      // Espera a escolha do usu√°rio
      deferredPrompt.userChoice.then((choiceResult) => {
        if (choiceResult.outcome === "accepted") {
          console.log("Usu√°rio aceitou instalar");
        } else {
          console.log("Usu√°rio recusou a instala√ß√£o");
        }

        deferredPrompt = null;
        installBtn.remove(); // Remove o bot√£o ap√≥s a escolha
      });
    });
  }
});

// ========== L√≥gica do To-Do List ========== //

// Seleciona os elementos do DOM
const form = document.getElementById("task-form");
const input = document.getElementById("task-input");
const list = document.getElementById("task-list");

// Carrega tarefas salvas no localStorage ou inicia com array vazio
let tasks = JSON.parse(localStorage.getItem("tasks")) || [];

// Salva as tarefas no localStorage
function saveTasks() {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

// Renderiza as tarefas na tela
function renderTasks() {
  list.innerHTML = ""; // Limpa a lista antes de renderizar

  tasks.forEach((task, index) => {
    const li = document.createElement("li");
    li.textContent = task.text; // Texto da tarefa

    if (task.done) li.classList.add("completed"); // Marca como conclu√≠da

    // Alterna o status de conclu√≠da ao clicar
    li.addEventListener("click", () => {
      tasks[index].done = !tasks[index].done;
      saveTasks();
      renderTasks();
    });

    // Bot√£o de remover tarefa
    const removeBtn = document.createElement("button");
    removeBtn.textContent = "x";
    removeBtn.addEventListener("click", (e) => {
      e.stopPropagation(); // Impede de marcar como conclu√≠da ao remover
      tasks.splice(index, 1); // Remove do array
      saveTasks();
      renderTasks();
    });

    li.appendChild(removeBtn);
    list.appendChild(li);
  });
}

// Evento de envio do formul√°rio (nova tarefa)
form.addEventListener("submit", (e) => {
  e.preventDefault();
  const text = input.value.trim();

  if (text) {
    tasks.push({ text, done: false }); // Adiciona tarefa ao array
    saveTasks();
    renderTasks();
    input.value = ""; // Limpa campo de entrada

    // Envia notifica√ß√£o se permitido
    if (Notification.permission === "granted") {
      new Notification("‚úÖ Tarefa adicionada com sucesso!");
    }
  }
});

// Inicializa a lista de tarefas ao carregar a p√°gina
renderTasks();
